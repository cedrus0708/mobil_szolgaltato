todo-notes:
	OK:1 és 3on kuivul üzenet	
	OK:MÉG NEM MŰKÖDIK NEGAGTÍV SZÁMOKRA a string konstruktor!
	OK:count digit negativ szamokkal!
	OK:FILE TARTALMA HIBAS ESETBEN EXEPTION 
	OK:nem intreface tesztek
	OK:szamlazas eredmenyenek fajlbairasa
	X:cpp függvenyek sorba rendezni az interface-ban
		felesleges munka
	OK:globalis valtozo
	X:minden csomag erteke allithato lehetne
		felesleges jelen esetben
	X:fo valasztasnal konvertalja szamma
		elmeletileg lehetne olyan opció is, amihez szöveg szükséges
	OK:string +=
	OK:hibakereles unblock
	OK:hibakezeles fajtai
	X:vector iterator mindenhol
		csak ha nem max pont
	OK:vector másolható és értékadható
	X:szamlazas beolvasas negativ szamok, vagy szöveg
		nem veszi eszre senki
	OK:interface tesztek
	OK:dokumentacio
	OK:specifikacio ellenorzese, hogy minden megvan-e
	leadás
	X:delete vector.cpp VAGY vector.hpp atalakit
		nem kell ez igy jo
	X:string: erase jelentése: kitöröl.. másik név?
		jo lesz egyenlore

	OK:ne legyen a mainben egy mindent elkapó catch??
	OK:tesztesetek dokumentacioja
	X:faljolvasas es iras test az interfaceban
		mert majd ha kell bele teszem
OK:interface improvement:
	OK:a get string stb.. inputok publikusak
	OK:tovabb szetvalasztani az alap logikat es arra epiteni az üzleti szövegelést

OK:Hibakezelés:
OK:	Fájlkzelés sikertelensége esetén runtime_error-t dob.
OK:	Mindnehol hibának megfelelő exepciont típust dobtam.

OK:Az interface osztályban minden tagfüggvény privát volt, kivéve a run(), ami elnitotta (kons, destr) ezért nem tudtam tesztelni. Ezért a tesztelendő függvényeket publikussá tettem.
OK:Az osztályon belül is igyekeztem a ki és bemeneti szöveget elszeparálni a logikáról (azaz a logikára építeni a szövegelést)

OK:Az interface.run függvény felépítése

OK:Tettem bele isInterfacing gettert. Ezt én egy single thread esetén nem tudom hasznosan felhasználni, de egy esetleges bővitett verzióban szükséges lehet.
OK:Az intarface tesztelésénél, amikor a getugyfelet tesztelem és a program egy ügyfél pointerével  tér vissza, akkor elég ellenőriztem, hogy az a pointer nem nullpointer.

OK:Az interfaceban a számlázás függványem kettő függvénybe szerveztem, de még így is határset a hosszusága. Ezért ezt itt megemlítem, hogy azt nehéz lenne a megnyitott fáljlok miatt tovább törtelni.


OK:Fajlbeolvasaskor a progam ugyfelek beolvaasasa eseten feltetelezi, hogy a fajl hibatlan, es nem tartalmaz hamis, hibas adatokat.
OK:Szamlazas eseteben van minimalis ellenorzes a fajl helyesseget illetoen. 
OK:	(ugyfelek szama, adatok helyessege).

OK:Ugyfelben a default konstruktorban a telefonszámot nullára állítom, ami egy nem valós érték.
Mert
Telefonszám csak pozitiv egesz szam lehet!

OK:A programban mindenhol std::exception kivételt használok.

OK:Bár eddig azt mondam, hogy a csomagon belül a szamol függvenyt nem teszem konstansá, mert elméletben válzotzathaná a csomag belső értékeit, mibvel ezt nem tette, azétr constatnsá tettem.

OK:A teszt programban egyes, trükkös helyeken, ahol stringstream-mel kellett tesztelnem, 
OK:hogy jól beolvassa-e magát az objektum használtam std::string-et közvetetten.

OK:Uj ugyfel beolvasasanal a telefonszam osszesen 11jegyű lehet.
OK:pl +36 304567676 Azaz összesen kilenc számjegy írható be. Hosszabb telefonszám a rendszerben nem kezelhető.


main
string.h + string.cpp
vector.h(pp) + vector.cpp - x:iterátor is <- "Generikus Tároló"
	felesleges az iterátor.
ugyfel.h + ugyfel.cpp
csomag.h + csomag.cpp
x:file.h + file.cpp
	interface megoldja
menu.h + menu.cpp

----

